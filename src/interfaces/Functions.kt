package interfaces

/**
 * Интерфейс содержащий базовые методы
 */
interface Functions {
    /**
     * Метод для сложения двух чисел
     * @param a слогаемое 1
     * @param b слогаемое 2
     * @return сумма
     */
    fun calculate(a: Int, b: Int): Int

    /**
     * Метод для поиска числа вхождений подстроки в строку
     * @param s входная строка
     * @param sub подстрока
     * @return количество вхождений подстроки в строку
     */
    fun substringCounter(s: String, sub: String): Int

    /**
     * Метод для разделения строки по подстроке
     * @param s входная строка
     * @param sub подстрока
     * @return лист подстрок, получившихся в результате разделения исходной строки
     */
    fun splitterSorter(s: String, sub: String): List<String>

    /**
     * Метод для подсчета уникальных подстрок в строке
     * сначала строка s разбивается по подстроке sub, затем подсчитывается частота вхождений и записывается в карту
     * @param s входная строка
     * @param sub подстрока, по которой будет разделяться строка
     * @return карту, в которой ключ - уникальная подстрока, значение - число ее вхождений в строку
     */
    fun uniqueCounter(s: String, sub: String): Map<String, Int>

    /**
     * Метод для проверки строки на палиндром
     * @param s входная строка
     * @return true если строка - палиндром false - если строка не палиндром
     */
    fun isPalindrome(s: String): Boolean

    /**
     * Метод для вывода строки, обратной поданной на вход
     * @param s входная строка
     * @return строка, обратная данной
     */
    fun invert(s: String): String
}
